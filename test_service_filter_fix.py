#!/usr/bin/env python3
"""
Teste para verificar se o filtro de servi√ßos est√° funcionando corretamente
nas estat√≠sticas do Dashboard de Servi√ßos.
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from services.omie_service import OmieService

def test_service_filter_fix():
    """Testa se o filtro de servi√ßos est√° funcionando corretamente"""
    print("üß™ Testando corre√ß√£o do filtro de servi√ßos...")
    
    # Inicializar servi√ßo
    omie_service = OmieService()
    
    # 1. Buscar todas as ordens de servi√ßo
    print("\n1. Carregando todas as ordens de servi√ßo...")
    all_orders = omie_service.get_all_service_orders()
    print(f"   Total de ordens carregadas: {len(all_orders)}")
    
    # 2. Filtrar ordens por um servi√ßo espec√≠fico (simulando o que acontece no app.py)
    service_filter = "Imers√£o BLI"
    print(f"\n2. Filtrando ordens por servi√ßo: '{service_filter}'")
    
    filtered_orders = []
    for order in all_orders:
        servicos = order.get("ServicosPrestados", [])
        if any(s.get('cDescServ', '').strip() == service_filter for s in servicos):
            filtered_orders.append(order)
    
    print(f"   Ordens filtradas: {len(filtered_orders)}")
    
    # 3. Testar estat√≠sticas SEM filtro de servi√ßo
    print("\n3. Testando estat√≠sticas SEM filtro de servi√ßo...")
    stats_without_filter = omie_service.get_service_orders_stats(orders=filtered_orders)
    service_breakdown_without = stats_without_filter.get('service_breakdown', {})
    print(f"   Servi√ßos no breakdown: {len(service_breakdown_without)}")
    print(f"   Servi√ßos: {list(service_breakdown_without.keys())}")
    
    # 4. Testar estat√≠sticas COM filtro de servi√ßo
    print("\n4. Testando estat√≠sticas COM filtro de servi√ßo...")
    stats_with_filter = omie_service.get_service_orders_stats(orders=filtered_orders, service_filter=service_filter)
    service_breakdown_with = stats_with_filter.get('service_breakdown', {})
    print(f"   Servi√ßos no breakdown: {len(service_breakdown_with)}")
    print(f"   Servi√ßos: {list(service_breakdown_with.keys())}")
    
    # 5. Verificar se a corre√ß√£o funcionou
    print("\n5. Verificando resultados...")
    
    # Sem filtro: deve mostrar todos os servi√ßos cadastrados (16)
    expected_without_filter = 16
    if len(service_breakdown_without) == expected_without_filter:
        print(f"   ‚úÖ SEM filtro: {len(service_breakdown_without)} servi√ßos (esperado: {expected_without_filter})")
    else:
        print(f"   ‚ùå SEM filtro: {len(service_breakdown_without)} servi√ßos (esperado: {expected_without_filter})")
    
    # Com filtro: deve mostrar apenas os servi√ßos presentes nos dados filtrados
    services_in_filtered_data = set()
    for order in filtered_orders:
        servicos = order.get("ServicosPrestados", [])
        for servico in servicos:
            service_desc = servico.get("cDescServ", "").strip()
            if service_desc:
                services_in_filtered_data.add(service_desc)
    
    expected_with_filter = len(services_in_filtered_data)
    if len(service_breakdown_with) == expected_with_filter:
        print(f"   ‚úÖ COM filtro: {len(service_breakdown_with)} servi√ßos (esperado: {expected_with_filter})")
    else:
        print(f"   ‚ùå COM filtro: {len(service_breakdown_with)} servi√ßos (esperado: {expected_with_filter})")
    
    # 6. Verificar se o servi√ßo filtrado est√° presente
    if service_filter in service_breakdown_with:
        service_data = service_breakdown_with[service_filter]
        print(f"   ‚úÖ Servi√ßo '{service_filter}' encontrado com {service_data['total_count']} ordens")
    else:
        print(f"   ‚ùå Servi√ßo '{service_filter}' n√£o encontrado no breakdown")
    
    # 7. Resumo final
    print("\nüìä RESUMO DO TESTE:")
    print(f"   ‚Ä¢ Ordens totais: {len(all_orders)}")
    print(f"   ‚Ä¢ Ordens filtradas por '{service_filter}': {len(filtered_orders)}")
    print(f"   ‚Ä¢ Servi√ßos sem filtro: {len(service_breakdown_without)}")
    print(f"   ‚Ä¢ Servi√ßos com filtro: {len(service_breakdown_with)}")
    
    # Verificar se a corre√ß√£o foi bem-sucedida
    success = (
        len(service_breakdown_without) == expected_without_filter and
        len(service_breakdown_with) == expected_with_filter and
        service_filter in service_breakdown_with
    )
    
    if success:
        print("\nüéâ TESTE PASSOU! A corre√ß√£o do filtro de servi√ßos est√° funcionando corretamente.")
    else:
        print("\n‚ùå TESTE FALHOU! Ainda h√° problemas com o filtro de servi√ßos.")
    
    return success

if __name__ == "__main__":
    try:
        test_service_filter_fix()
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {str(e)}")
        import traceback
        traceback.print_exc()