#!/usr/bin/env python3
"""
Script para criar usu√°rios no sistema
Execute este script para criar novos usu√°rios ou gerar hashes de senha
"""

import sys
import os
import hashlib
from dotenv import load_dotenv

# Adicionar o diret√≥rio src ao path para importar os servi√ßos
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from services.auth_service import AuthService

def hash_password(password: str) -> str:
    """Gera hash SHA-256 da senha"""
    return hashlib.sha256(password.encode()).hexdigest()

def create_user_interactive():
    """Cria um usu√°rio de forma interativa"""
    print("=== Criador de Usu√°rios - Financeira Aut√™ntica ===\n")
    
    try:
        # Carregar vari√°veis de ambiente
        load_dotenv()
        
        # Verificar se as vari√°veis do Supabase est√£o configuradas
        if not os.getenv('SUPABASE_URL') or not os.getenv('SUPABASE_KEY'):
            print("‚ùå Erro: Vari√°veis SUPABASE_URL e SUPABASE_KEY n√£o est√£o configuradas no arquivo .env")
            print("Por favor, configure essas variÔøΩÔøΩveis antes de continuar.")
            return
        
        if os.getenv('SUPABASE_URL') == 'your_supabase_url_here':
            print("‚ùå Erro: Por favor, configure a SUPABASE_URL real no arquivo .env")
            return
            
        if os.getenv('SUPABASE_KEY') == 'your_supabase_anon_key_here':
            print("‚ùå Erro: Por favor, configure a SUPABASE_KEY real no arquivo .env")
            return
        
        # Inicializar o servi√ßo de autentica√ß√£o
        auth_service = AuthService()
        
        # Coletar dados do usu√°rio
        email = input("Email do usu√°rio: ").strip()
        if not email:
            print("‚ùå Email √© obrigat√≥rio!")
            return
        
        if not auth_service.validate_email(email):
            print("‚ùå Formato de email inv√°lido!")
            return
        
        name = input("Nome completo (opcional): ").strip()
        if not name:
            name = None
        
        password = input("Senha: ").strip()
        if not password:
            print("‚ùå Senha √© obrigat√≥ria!")
            return
        
        if len(password) < 6:
            print("‚ùå Senha deve ter pelo menos 6 caracteres!")
            return
        
        # Confirmar senha
        password_confirm = input("Confirme a senha: ").strip()
        if password != password_confirm:
            print("‚ùå Senhas n√£o coincidem!")
            return
        
        # Criar o usu√°rio
        print("\nüîÑ Criando usu√°rio...")
        user = auth_service.create_user(email, password, name)
        
        if user:
            print(f"‚úÖ Usu√°rio criado com sucesso!")
            print(f"   ID: {user['id']}")
            print(f"   Email: {user['email']}")
            print(f"   Nome: {user.get('name', 'N√£o informado')}")
            print(f"   Criado em: {user.get('created_at', 'N/A')}")
        else:
            print("‚ùå Erro ao criar usu√°rio. Verifique se o email j√° n√£o est√° em uso.")
    
    except Exception as e:
        print(f"‚ùå Erro: {e}")

def generate_password_hash():
    """Gera hash de uma senha para uso manual"""
    print("=== Gerador de Hash de Senha ===\n")
    
    password = input("Digite a senha para gerar o hash: ").strip()
    if not password:
        print("‚ùå Senha √© obrigat√≥ria!")
        return
    
    password_hash = hash_password(password)
    print(f"\nüìã Hash SHA-256 da senha:")
    print(f"   {password_hash}")
    print(f"\nüí° Use este hash na coluna 'password_hash' da tabela 'users'")

def main():
    """Fun√ß√£o principal"""
    print("Escolha uma op√ß√£o:")
    print("1. Criar usu√°rio via API")
    print("2. Gerar hash de senha")
    print("3. Sair")
    
    choice = input("\nOp√ß√£o (1-3): ").strip()
    
    if choice == '1':
        create_user_interactive()
    elif choice == '2':
        generate_password_hash()
    elif choice == '3':
        print("üëã At√© logo!")
    else:
        print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    main()